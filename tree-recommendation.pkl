{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "58f4da44",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-02-21T12:44:08.361071Z",
     "iopub.status.busy": "2024-02-21T12:44:08.359810Z",
     "iopub.status.idle": "2024-02-21T12:44:09.365326Z",
     "shell.execute_reply": "2024-02-21T12:44:09.364149Z"
    },
    "papermill": {
     "duration": 1.01531,
     "end_time": "2024-02-21T12:44:09.368285",
     "exception": false,
     "start_time": "2024-02-21T12:44:08.352975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46fef0b0",
   "metadata": {
    "papermill": {
     "duration": 0.003933,
     "end_time": "2024-02-21T12:44:09.376813",
     "exception": false,
     "start_time": "2024-02-21T12:44:09.372880",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "dataset = pd.read_csv(\"/kaggle/input/plant-recommend-dataset-1/plant_recommendation_dataset.csv\")\n",
    "dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ce24544e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-21T12:44:09.387241Z",
     "iopub.status.busy": "2024-02-21T12:44:09.386704Z",
     "iopub.status.idle": "2024-02-21T12:44:09.442938Z",
     "shell.execute_reply": "2024-02-21T12:44:09.441794Z"
    },
    "papermill": {
     "duration": 0.06446,
     "end_time": "2024-02-21T12:44:09.445505",
     "exception": false,
     "start_time": "2024-02-21T12:44:09.381045",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>N</th>\n",
       "      <th>P</th>\n",
       "      <th>K</th>\n",
       "      <th>temperature</th>\n",
       "      <th>Humidity</th>\n",
       "      <th>ph</th>\n",
       "      <th>rainfall</th>\n",
       "      <th>Soil_Type</th>\n",
       "      <th>district</th>\n",
       "      <th>Trees</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>90</td>\n",
       "      <td>42</td>\n",
       "      <td>43</td>\n",
       "      <td>20.879744</td>\n",
       "      <td>82.002744</td>\n",
       "      <td>6.502985</td>\n",
       "      <td>202.935536</td>\n",
       "      <td>Alluvial</td>\n",
       "      <td>Jhajjar</td>\n",
       "      <td>mango</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>90</td>\n",
       "      <td>42</td>\n",
       "      <td>43</td>\n",
       "      <td>20.879744</td>\n",
       "      <td>82.002744</td>\n",
       "      <td>6.502985</td>\n",
       "      <td>202.935536</td>\n",
       "      <td>Black</td>\n",
       "      <td>Jhajjar</td>\n",
       "      <td>teak</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>90</td>\n",
       "      <td>42</td>\n",
       "      <td>43</td>\n",
       "      <td>20.879744</td>\n",
       "      <td>82.002744</td>\n",
       "      <td>6.502985</td>\n",
       "      <td>202.935536</td>\n",
       "      <td>Red</td>\n",
       "      <td>Jhajjar</td>\n",
       "      <td>teak</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>90</td>\n",
       "      <td>42</td>\n",
       "      <td>43</td>\n",
       "      <td>20.879744</td>\n",
       "      <td>82.002744</td>\n",
       "      <td>6.502985</td>\n",
       "      <td>202.935536</td>\n",
       "      <td>Laterite</td>\n",
       "      <td>Jhajjar</td>\n",
       "      <td>cashew</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>90</td>\n",
       "      <td>42</td>\n",
       "      <td>43</td>\n",
       "      <td>20.879744</td>\n",
       "      <td>82.002744</td>\n",
       "      <td>6.502985</td>\n",
       "      <td>202.935536</td>\n",
       "      <td>Mountain and forest</td>\n",
       "      <td>Jhajjar</td>\n",
       "      <td>Himalayan cedar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>90</td>\n",
       "      <td>42</td>\n",
       "      <td>43</td>\n",
       "      <td>20.879744</td>\n",
       "      <td>82.002744</td>\n",
       "      <td>6.502985</td>\n",
       "      <td>202.935536</td>\n",
       "      <td>Desert</td>\n",
       "      <td>Jhajjar</td>\n",
       "      <td>jojoba tree</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>90</td>\n",
       "      <td>42</td>\n",
       "      <td>43</td>\n",
       "      <td>20.879744</td>\n",
       "      <td>82.002744</td>\n",
       "      <td>6.502985</td>\n",
       "      <td>202.935536</td>\n",
       "      <td>Peat</td>\n",
       "      <td>Jhajjar</td>\n",
       "      <td>sphagnum moss</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>90</td>\n",
       "      <td>42</td>\n",
       "      <td>43</td>\n",
       "      <td>20.879744</td>\n",
       "      <td>82.002744</td>\n",
       "      <td>6.502985</td>\n",
       "      <td>202.935536</td>\n",
       "      <td>Saline and Alkaline</td>\n",
       "      <td>Jhajjar</td>\n",
       "      <td>indian tamarisk</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>90</td>\n",
       "      <td>42</td>\n",
       "      <td>43</td>\n",
       "      <td>20.879744</td>\n",
       "      <td>82.002744</td>\n",
       "      <td>6.502985</td>\n",
       "      <td>202.935536</td>\n",
       "      <td>Arid</td>\n",
       "      <td>Jhajjar</td>\n",
       "      <td>rosewood or kejri tree</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>90</td>\n",
       "      <td>42</td>\n",
       "      <td>43</td>\n",
       "      <td>20.879744</td>\n",
       "      <td>82.002744</td>\n",
       "      <td>6.502985</td>\n",
       "      <td>202.935536</td>\n",
       "      <td>Lateritic</td>\n",
       "      <td>Jhajjar</td>\n",
       "      <td>cashew tree</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>85</td>\n",
       "      <td>58</td>\n",
       "      <td>41</td>\n",
       "      <td>21.770462</td>\n",
       "      <td>80.319644</td>\n",
       "      <td>7.038096</td>\n",
       "      <td>226.655537</td>\n",
       "      <td>Alluvial</td>\n",
       "      <td>Jhajjar</td>\n",
       "      <td>mango</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>85</td>\n",
       "      <td>58</td>\n",
       "      <td>41</td>\n",
       "      <td>21.770462</td>\n",
       "      <td>80.319644</td>\n",
       "      <td>7.038096</td>\n",
       "      <td>226.655537</td>\n",
       "      <td>Black</td>\n",
       "      <td>Jhajjar</td>\n",
       "      <td>mahogany</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>85</td>\n",
       "      <td>58</td>\n",
       "      <td>41</td>\n",
       "      <td>21.770462</td>\n",
       "      <td>80.319644</td>\n",
       "      <td>7.038096</td>\n",
       "      <td>226.655537</td>\n",
       "      <td>Red</td>\n",
       "      <td>Jhajjar</td>\n",
       "      <td>mahogany</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>85</td>\n",
       "      <td>58</td>\n",
       "      <td>41</td>\n",
       "      <td>21.770462</td>\n",
       "      <td>80.319644</td>\n",
       "      <td>7.038096</td>\n",
       "      <td>226.655537</td>\n",
       "      <td>Laterite</td>\n",
       "      <td>Jhajjar</td>\n",
       "      <td>jackfruit</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>85</td>\n",
       "      <td>58</td>\n",
       "      <td>41</td>\n",
       "      <td>21.770462</td>\n",
       "      <td>80.319644</td>\n",
       "      <td>7.038096</td>\n",
       "      <td>226.655537</td>\n",
       "      <td>Mountain and forest</td>\n",
       "      <td>Jhajjar</td>\n",
       "      <td>deodar cedar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>85</td>\n",
       "      <td>58</td>\n",
       "      <td>41</td>\n",
       "      <td>21.770462</td>\n",
       "      <td>80.319644</td>\n",
       "      <td>7.038096</td>\n",
       "      <td>226.655537</td>\n",
       "      <td>Desert</td>\n",
       "      <td>Jhajjar</td>\n",
       "      <td>date palm</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>85</td>\n",
       "      <td>58</td>\n",
       "      <td>41</td>\n",
       "      <td>21.770462</td>\n",
       "      <td>80.319644</td>\n",
       "      <td>7.038096</td>\n",
       "      <td>226.655537</td>\n",
       "      <td>Peat</td>\n",
       "      <td>Jhajjar</td>\n",
       "      <td>black spruce</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>85</td>\n",
       "      <td>58</td>\n",
       "      <td>41</td>\n",
       "      <td>21.770462</td>\n",
       "      <td>80.319644</td>\n",
       "      <td>7.038096</td>\n",
       "      <td>226.655537</td>\n",
       "      <td>Saline and Alkaline</td>\n",
       "      <td>Jhajjar</td>\n",
       "      <td>tamaisk tree</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>85</td>\n",
       "      <td>58</td>\n",
       "      <td>41</td>\n",
       "      <td>21.770462</td>\n",
       "      <td>80.319644</td>\n",
       "      <td>7.038096</td>\n",
       "      <td>226.655537</td>\n",
       "      <td>Arid</td>\n",
       "      <td>Jhajjar</td>\n",
       "      <td>jojoba tree</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>85</td>\n",
       "      <td>58</td>\n",
       "      <td>41</td>\n",
       "      <td>21.770462</td>\n",
       "      <td>80.319644</td>\n",
       "      <td>7.038096</td>\n",
       "      <td>226.655537</td>\n",
       "      <td>Lateritic</td>\n",
       "      <td>Jhajjar</td>\n",
       "      <td>cashew tree</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>60</td>\n",
       "      <td>55</td>\n",
       "      <td>44</td>\n",
       "      <td>23.004459</td>\n",
       "      <td>82.320763</td>\n",
       "      <td>7.840207</td>\n",
       "      <td>263.964248</td>\n",
       "      <td>Alluvial</td>\n",
       "      <td>Rewari</td>\n",
       "      <td>sandalwood tree</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>60</td>\n",
       "      <td>55</td>\n",
       "      <td>44</td>\n",
       "      <td>23.004459</td>\n",
       "      <td>82.320763</td>\n",
       "      <td>7.840207</td>\n",
       "      <td>263.964248</td>\n",
       "      <td>Black</td>\n",
       "      <td>Rewari</td>\n",
       "      <td>neem</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>60</td>\n",
       "      <td>55</td>\n",
       "      <td>44</td>\n",
       "      <td>23.004459</td>\n",
       "      <td>82.320763</td>\n",
       "      <td>7.840207</td>\n",
       "      <td>263.964248</td>\n",
       "      <td>Red</td>\n",
       "      <td>Rewari</td>\n",
       "      <td>mahogany</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>60</td>\n",
       "      <td>55</td>\n",
       "      <td>44</td>\n",
       "      <td>23.004459</td>\n",
       "      <td>82.320763</td>\n",
       "      <td>7.840207</td>\n",
       "      <td>263.964248</td>\n",
       "      <td>Laterite</td>\n",
       "      <td>Rewari</td>\n",
       "      <td>jackfruit</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>60</td>\n",
       "      <td>55</td>\n",
       "      <td>44</td>\n",
       "      <td>23.004459</td>\n",
       "      <td>82.320763</td>\n",
       "      <td>7.840207</td>\n",
       "      <td>263.964248</td>\n",
       "      <td>Mountain and forest</td>\n",
       "      <td>Rewari</td>\n",
       "      <td>Himalayan cedar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>60</td>\n",
       "      <td>55</td>\n",
       "      <td>44</td>\n",
       "      <td>23.004459</td>\n",
       "      <td>82.320763</td>\n",
       "      <td>7.840207</td>\n",
       "      <td>263.964248</td>\n",
       "      <td>Desert</td>\n",
       "      <td>Rewari</td>\n",
       "      <td>neem</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>60</td>\n",
       "      <td>55</td>\n",
       "      <td>44</td>\n",
       "      <td>23.004459</td>\n",
       "      <td>82.320763</td>\n",
       "      <td>7.840207</td>\n",
       "      <td>263.964248</td>\n",
       "      <td>Peat</td>\n",
       "      <td>Rewari</td>\n",
       "      <td>swamp cypress</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>60</td>\n",
       "      <td>55</td>\n",
       "      <td>44</td>\n",
       "      <td>23.004459</td>\n",
       "      <td>82.320763</td>\n",
       "      <td>7.840207</td>\n",
       "      <td>263.964248</td>\n",
       "      <td>Saline and Alkaline</td>\n",
       "      <td>Rewari</td>\n",
       "      <td>tamarisk tree</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>60</td>\n",
       "      <td>55</td>\n",
       "      <td>44</td>\n",
       "      <td>23.004459</td>\n",
       "      <td>82.320763</td>\n",
       "      <td>7.840207</td>\n",
       "      <td>263.964248</td>\n",
       "      <td>Arid</td>\n",
       "      <td>Rewari</td>\n",
       "      <td>argan tree</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>60</td>\n",
       "      <td>55</td>\n",
       "      <td>44</td>\n",
       "      <td>23.004459</td>\n",
       "      <td>82.320763</td>\n",
       "      <td>7.840207</td>\n",
       "      <td>263.964248</td>\n",
       "      <td>Lateritic</td>\n",
       "      <td>Rewari</td>\n",
       "      <td>jackfruit</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>74</td>\n",
       "      <td>35</td>\n",
       "      <td>40</td>\n",
       "      <td>26.491096</td>\n",
       "      <td>80.158363</td>\n",
       "      <td>6.980401</td>\n",
       "      <td>242.864034</td>\n",
       "      <td>Alluvial</td>\n",
       "      <td>Rewari</td>\n",
       "      <td>mahogany</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>74</td>\n",
       "      <td>35</td>\n",
       "      <td>40</td>\n",
       "      <td>26.491096</td>\n",
       "      <td>80.158363</td>\n",
       "      <td>6.980401</td>\n",
       "      <td>242.864034</td>\n",
       "      <td>Black</td>\n",
       "      <td>Rewari</td>\n",
       "      <td>mahogany</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>74</td>\n",
       "      <td>35</td>\n",
       "      <td>40</td>\n",
       "      <td>26.491096</td>\n",
       "      <td>80.158363</td>\n",
       "      <td>6.980401</td>\n",
       "      <td>242.864034</td>\n",
       "      <td>Red</td>\n",
       "      <td>Rewari</td>\n",
       "      <td>tamarind</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>74</td>\n",
       "      <td>35</td>\n",
       "      <td>40</td>\n",
       "      <td>26.491096</td>\n",
       "      <td>80.158363</td>\n",
       "      <td>6.980401</td>\n",
       "      <td>242.864034</td>\n",
       "      <td>Laterite</td>\n",
       "      <td>Rewari</td>\n",
       "      <td>jackfruit</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>74</td>\n",
       "      <td>35</td>\n",
       "      <td>40</td>\n",
       "      <td>26.491096</td>\n",
       "      <td>80.158363</td>\n",
       "      <td>6.980401</td>\n",
       "      <td>242.864034</td>\n",
       "      <td>Mountain and forest</td>\n",
       "      <td>Rewari</td>\n",
       "      <td>Himalayan cedar</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>74</td>\n",
       "      <td>35</td>\n",
       "      <td>40</td>\n",
       "      <td>26.491096</td>\n",
       "      <td>80.158363</td>\n",
       "      <td>6.980401</td>\n",
       "      <td>242.864034</td>\n",
       "      <td>Desert</td>\n",
       "      <td>Rewari</td>\n",
       "      <td>date palm</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>74</td>\n",
       "      <td>35</td>\n",
       "      <td>40</td>\n",
       "      <td>26.491096</td>\n",
       "      <td>80.158363</td>\n",
       "      <td>6.980401</td>\n",
       "      <td>242.864034</td>\n",
       "      <td>Peat</td>\n",
       "      <td>Rewari</td>\n",
       "      <td>swamp cypress</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>74</td>\n",
       "      <td>35</td>\n",
       "      <td>40</td>\n",
       "      <td>26.491096</td>\n",
       "      <td>80.158363</td>\n",
       "      <td>6.980401</td>\n",
       "      <td>242.864034</td>\n",
       "      <td>Saline and Alkaline</td>\n",
       "      <td>Rewari</td>\n",
       "      <td>tamarix tree</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>74</td>\n",
       "      <td>35</td>\n",
       "      <td>40</td>\n",
       "      <td>26.491096</td>\n",
       "      <td>80.158363</td>\n",
       "      <td>6.980401</td>\n",
       "      <td>242.864034</td>\n",
       "      <td>Arid</td>\n",
       "      <td>Rewari</td>\n",
       "      <td>argan tree</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>74</td>\n",
       "      <td>35</td>\n",
       "      <td>40</td>\n",
       "      <td>26.491096</td>\n",
       "      <td>80.158363</td>\n",
       "      <td>6.980401</td>\n",
       "      <td>242.864034</td>\n",
       "      <td>Lateritic</td>\n",
       "      <td>Rewari</td>\n",
       "      <td>jackfruit</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     N   P   K  temperature   Humidity        ph    rainfall  \\\n",
       "0   90  42  43    20.879744  82.002744  6.502985  202.935536   \n",
       "1   90  42  43    20.879744  82.002744  6.502985  202.935536   \n",
       "2   90  42  43    20.879744  82.002744  6.502985  202.935536   \n",
       "3   90  42  43    20.879744  82.002744  6.502985  202.935536   \n",
       "4   90  42  43    20.879744  82.002744  6.502985  202.935536   \n",
       "5   90  42  43    20.879744  82.002744  6.502985  202.935536   \n",
       "6   90  42  43    20.879744  82.002744  6.502985  202.935536   \n",
       "7   90  42  43    20.879744  82.002744  6.502985  202.935536   \n",
       "8   90  42  43    20.879744  82.002744  6.502985  202.935536   \n",
       "9   90  42  43    20.879744  82.002744  6.502985  202.935536   \n",
       "10  85  58  41    21.770462  80.319644  7.038096  226.655537   \n",
       "11  85  58  41    21.770462  80.319644  7.038096  226.655537   \n",
       "12  85  58  41    21.770462  80.319644  7.038096  226.655537   \n",
       "13  85  58  41    21.770462  80.319644  7.038096  226.655537   \n",
       "14  85  58  41    21.770462  80.319644  7.038096  226.655537   \n",
       "15  85  58  41    21.770462  80.319644  7.038096  226.655537   \n",
       "16  85  58  41    21.770462  80.319644  7.038096  226.655537   \n",
       "17  85  58  41    21.770462  80.319644  7.038096  226.655537   \n",
       "18  85  58  41    21.770462  80.319644  7.038096  226.655537   \n",
       "19  85  58  41    21.770462  80.319644  7.038096  226.655537   \n",
       "20  60  55  44    23.004459  82.320763  7.840207  263.964248   \n",
       "21  60  55  44    23.004459  82.320763  7.840207  263.964248   \n",
       "22  60  55  44    23.004459  82.320763  7.840207  263.964248   \n",
       "23  60  55  44    23.004459  82.320763  7.840207  263.964248   \n",
       "24  60  55  44    23.004459  82.320763  7.840207  263.964248   \n",
       "25  60  55  44    23.004459  82.320763  7.840207  263.964248   \n",
       "26  60  55  44    23.004459  82.320763  7.840207  263.964248   \n",
       "27  60  55  44    23.004459  82.320763  7.840207  263.964248   \n",
       "28  60  55  44    23.004459  82.320763  7.840207  263.964248   \n",
       "29  60  55  44    23.004459  82.320763  7.840207  263.964248   \n",
       "30  74  35  40    26.491096  80.158363  6.980401  242.864034   \n",
       "31  74  35  40    26.491096  80.158363  6.980401  242.864034   \n",
       "32  74  35  40    26.491096  80.158363  6.980401  242.864034   \n",
       "33  74  35  40    26.491096  80.158363  6.980401  242.864034   \n",
       "34  74  35  40    26.491096  80.158363  6.980401  242.864034   \n",
       "35  74  35  40    26.491096  80.158363  6.980401  242.864034   \n",
       "36  74  35  40    26.491096  80.158363  6.980401  242.864034   \n",
       "37  74  35  40    26.491096  80.158363  6.980401  242.864034   \n",
       "38  74  35  40    26.491096  80.158363  6.980401  242.864034   \n",
       "39  74  35  40    26.491096  80.158363  6.980401  242.864034   \n",
       "\n",
       "               Soil_Type district                   Trees  \n",
       "0               Alluvial  Jhajjar                   mango  \n",
       "1                  Black  Jhajjar                    teak  \n",
       "2                    Red  Jhajjar                    teak  \n",
       "3               Laterite  Jhajjar                  cashew  \n",
       "4   Mountain and forest   Jhajjar         Himalayan cedar  \n",
       "5                 Desert  Jhajjar             jojoba tree  \n",
       "6                   Peat  Jhajjar           sphagnum moss  \n",
       "7    Saline and Alkaline  Jhajjar         indian tamarisk  \n",
       "8                   Arid  Jhajjar  rosewood or kejri tree  \n",
       "9              Lateritic  Jhajjar             cashew tree  \n",
       "10              Alluvial  Jhajjar                   mango  \n",
       "11                 Black  Jhajjar                mahogany  \n",
       "12                   Red  Jhajjar                mahogany  \n",
       "13              Laterite  Jhajjar               jackfruit  \n",
       "14  Mountain and forest   Jhajjar            deodar cedar  \n",
       "15                Desert  Jhajjar               date palm  \n",
       "16                  Peat  Jhajjar            black spruce  \n",
       "17   Saline and Alkaline  Jhajjar            tamaisk tree  \n",
       "18                  Arid  Jhajjar             jojoba tree  \n",
       "19             Lateritic  Jhajjar             cashew tree  \n",
       "20              Alluvial   Rewari         sandalwood tree  \n",
       "21                 Black   Rewari                    neem  \n",
       "22                   Red   Rewari                mahogany  \n",
       "23              Laterite   Rewari               jackfruit  \n",
       "24  Mountain and forest    Rewari         Himalayan cedar  \n",
       "25                Desert   Rewari                    neem  \n",
       "26                  Peat   Rewari           swamp cypress  \n",
       "27   Saline and Alkaline   Rewari           tamarisk tree  \n",
       "28                  Arid   Rewari              argan tree  \n",
       "29             Lateritic   Rewari               jackfruit  \n",
       "30              Alluvial   Rewari                mahogany  \n",
       "31                 Black   Rewari                mahogany  \n",
       "32                   Red   Rewari                tamarind  \n",
       "33              Laterite   Rewari               jackfruit  \n",
       "34  Mountain and forest    Rewari         Himalayan cedar  \n",
       "35                Desert   Rewari               date palm  \n",
       "36                  Peat   Rewari           swamp cypress  \n",
       "37   Saline and Alkaline   Rewari            tamarix tree  \n",
       "38                  Arid   Rewari              argan tree  \n",
       "39             Lateritic   Rewari               jackfruit  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset = pd.read_csv(\"/kaggle/input/plant-recommend-dataset-1/plant_recommendation_dataset.csv\") \n",
    "dataset\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "56c2a7cb",
   "metadata": {
    "papermill": {
     "duration": 0.004867,
     "end_time": "2024-02-21T12:44:09.455698",
     "exception": false,
     "start_time": "2024-02-21T12:44:09.450831",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bed8abda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-21T12:44:09.468097Z",
     "iopub.status.busy": "2024-02-21T12:44:09.467640Z",
     "iopub.status.idle": "2024-02-21T12:44:11.548629Z",
     "shell.execute_reply": "2024-02-21T12:44:11.547218Z"
    },
    "papermill": {
     "duration": 2.090513,
     "end_time": "2024-02-21T12:44:11.551449",
     "exception": false,
     "start_time": "2024-02-21T12:44:09.460936",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Create combo box for District_name\n",
    "import ipywidgets as widgets\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "88cd1e83",
   "metadata": {
    "papermill": {
     "duration": 0.004675,
     "end_time": "2024-02-21T12:44:11.561304",
     "exception": false,
     "start_time": "2024-02-21T12:44:11.556629",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "118cf9e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-08T18:23:26.069642Z",
     "iopub.status.busy": "2024-02-08T18:23:26.069347Z",
     "iopub.status.idle": "2024-02-08T18:23:26.135352Z",
     "shell.execute_reply": "2024-02-08T18:23:26.134420Z",
     "shell.execute_reply.started": "2024-02-08T18:23:26.069616Z"
    },
    "papermill": {
     "duration": 0.004575,
     "end_time": "2024-02-21T12:44:11.570899",
     "exception": false,
     "start_time": "2024-02-21T12:44:11.566324",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Create combo box for District_name\n",
    "district_widget = widgets.Combobox(\n",
    "    options=tuple(dataset['district'].unique()),\n",
    "    description='District:',\n",
    "    placeholder='Select district',\n",
    "    ensure_option=True\n",
    ")\n",
    "\n",
    "# Create an empty soil color widget initially\n",
    "soil_color_widget = widgets.Combobox(\n",
    "    description='Soil Color:',\n",
    "    placeholder='Select soil color',\n",
    "    ensure_option=True\n",
    ")\n",
    "\n",
    "nitrogen_widget = widgets.Combobox(\n",
    "    description='Nitrogen:',\n",
    "    placeholder='Select nitrogen value',\n",
    "    ensure_option=True\n",
    ")\n",
    "\n",
    "phosphorus_widget = widgets.Combobox(\n",
    "    description='Phosphorus:',\n",
    "    placeholder='Select phosphorus value',\n",
    "    ensure_option=True\n",
    ")\n",
    "\n",
    "potassium_widget = widgets.Combobox(\n",
    "    description='Potassium:',\n",
    "    placeholder='Select potassium value',\n",
    "    ensure_option=True\n",
    ")\n",
    "\n",
    "ph_widget = widgets.Combobox(\n",
    "    description='pH:',\n",
    "    placeholder='Select pH value',\n",
    "    ensure_option=True\n",
    ")\n",
    "\n",
    "rainfall_widget = widgets.Combobox(\n",
    "    description='Rainfall:',\n",
    "    placeholder='Select rainfall value',\n",
    "    ensure_option=True\n",
    ")\n",
    "\n",
    "temperature_widget = widgets.Combobox(\n",
    "    description='Temperature:',\n",
    "    placeholder='Select temperature value',\n",
    "    ensure_option=True\n",
    ")\n",
    "\n",
    "recommend_widget = widgets.Output()\n",
    "\n",
    "\n",
    "# Define the observer function to update soil color options\n",
    "def update_soil_color_options(change):\n",
    "    district = change.new\n",
    "    if district:\n",
    "        soil_colors = dataset[dataset['district'] == district]['Soil_Type'].unique()\n",
    "        soil_color_widget.options = tuple(soil_colors)\n",
    "    else:\n",
    "        soil_color_widget.options = ()\n",
    "\n",
    "# Define the observer function to update nitrogen options\n",
    "def update_nitrogen_options(change):\n",
    "    district = district_widget.value\n",
    "    soil_color = soil_color_widget.value\n",
    "    if district and soil_color:\n",
    "        nitrogen_values = dataset[(dataset['district'] == district) & (dataset['Soil_Type'] == soil_color)]['N'].unique()\n",
    "        nitrogen_values = [str(value) for value in nitrogen_values]  # Convert to Unicode strings\n",
    "        nitrogen_widget.options = tuple(nitrogen_values)\n",
    "    else:\n",
    "        nitrogen_widget.options = ()\n",
    "        \n",
    "def update_phosphorus_options(change):\n",
    "    district = district_widget.value\n",
    "    soil_color = soil_color_widget.value\n",
    "    if district and soil_color:\n",
    "        phosphorus_values = dataset[(dataset['district'] == district) & (dataset['Soil_Type'] == soil_color)]['P'].unique()\n",
    "        phosphorus_values = [str(value) for value in phosphorus_values]  # Convert to Unicode strings\n",
    "        phosphorus_widget.options = tuple(phosphorus_values)\n",
    "    else:\n",
    "        phosphorus_widget.options = ()\n",
    "        \n",
    "def update_potassium_options(change):\n",
    "    district = district_widget.value\n",
    "    soil_color = soil_color_widget.value\n",
    "    if district and soil_color:\n",
    "        potassium_values = dataset[(dataset['district'] == district) & (dataset['Soil_Type'] == soil_color)]['K'].unique()\n",
    "        potassium_values = [str(value) for value in potassium_values]  # Convert to Unicode strings\n",
    "        potassium_widget.options = tuple(potassium_values)\n",
    "    else:\n",
    "        potassium_widget.options = ()\n",
    "        \n",
    "def update_ph_options(change):\n",
    "    district = district_widget.value\n",
    "    soil_color = soil_color_widget.value\n",
    "    if district and soil_color:\n",
    "        ph_values = dataset[(dataset['district'] == district) & (dataset['Soil_Type'] == soil_color)]['ph'].unique()\n",
    "        ph_values = [str(value) for value in ph_values]  # Convert to Unicode strings\n",
    "        ph_widget.options = tuple(ph_values)\n",
    "    else:\n",
    "        ph_widget.options = ()\n",
    "        \n",
    "def update_rainfall_options(change):\n",
    "    district = district_widget.value\n",
    "    soil_color = soil_color_widget.value\n",
    "    if district and soil_color:\n",
    "        rainfall_values = dataset[(dataset['district'] == district) & (dataset['Soil_Type'] == soil_color)]['rainfall'].unique()\n",
    "        rainfall_values = [str(value) for value in rainfall_values]  # Convert to Unicode strings\n",
    "        rainfall_widget.options = tuple(rainfall_values)\n",
    "    else:\n",
    "        rainfall_widget.options = ()\n",
    "        \n",
    "def update_temperature_options(change):\n",
    "    district = district_widget.value\n",
    "    soil_color = soil_color_widget.value\n",
    "    if district and soil_color:\n",
    "        temperature_values = dataset[(dataset['district'] == district) & (dataset['Soil_Type'] == soil_color)]['temperature'].unique()\n",
    "        temperature_values = [str(value) for value in temperature_values]  # Convert to Unicode strings\n",
    "        temperature_widget.options = tuple(temperature_values)\n",
    "    else:\n",
    "        temperature_widget.options = ()\n",
    "        \n",
    "\n",
    "# Train the model\n",
    "def train_model(change):\n",
    "    # Get the selected values from the combo boxes\n",
    "    district = district_widget.value\n",
    "    soil_color = soil_color_widget.value\n",
    "    nitrogen = float(nitrogen_widget.value)\n",
    "    phosphorus = float(phosphorus_widget.value)\n",
    "    potassium = float(potassium_widget.value)\n",
    "    pH = float(ph_widget.value)\n",
    "    rainfall = float(rainfall_widget.value)\n",
    "    temperature = float(temperature_widget.value)\n",
    "\n",
    "   \n",
    "    input_data = pd.DataFrame(\n",
    "        [[nitrogen, phosphorus, potassium, pH, rainfall, temperature, district, soil_color]],\n",
    "        columns=['N', 'P', 'K', 'ph', 'rainfall', 'temperature', 'district', 'Soil_Type']\n",
    "    )\n",
    "    \n",
    "    # Perform one-hot encoding for District_Name and Soil_color columns\n",
    "    encoder = OneHotEncoder(handle_unknown='ignore')\n",
    "    X_encoded = encoder.fit_transform(dataset[['district', 'Soil_Type']])\n",
    "    input_data_encoded = encoder.transform(input_data[['district', 'Soil_Type']])\n",
    "\n",
    "    # Split the dataset into training and testing sets\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X_encoded, dataset['Trees'], test_size=0.2, random_state=42)\n",
    "\n",
    "    # Train the random forest model\n",
    "    model_crop = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    model_crop.fit(X_train, y_train)\n",
    "\n",
    "    # Make predictions\n",
    "    predicted_crop = model_crop.predict(input_data_encoded)\n",
    "\n",
    "    # Find the fertilizer associated with the recommended crop\n",
    "   \n",
    "    with recommend_widget:\n",
    "        recommend_widget.clear_output()\n",
    "        print(\"Recommended Tree:\", predicted_crop[0])\n",
    "      \n",
    "\n",
    "# Define the observer function to update soil color options\n",
    "district_widget.observe(update_soil_color_options, names='value')\n",
    "district_widget.observe(update_nitrogen_options, names='value')\n",
    "soil_color_widget.observe(update_nitrogen_options, names='value')\n",
    "\n",
    "\n",
    "district_widget.observe(update_phosphorus_options, names='value')\n",
    "soil_color_widget.observe(update_phosphorus_options, names='value')\n",
    "\n",
    "district_widget.observe(update_potassium_options, names='value')\n",
    "soil_color_widget.observe(update_potassium_options, names='value')\n",
    "\n",
    "district_widget.observe(update_ph_options, names='value')\n",
    "soil_color_widget.observe(update_ph_options, names='value')\n",
    "\n",
    "district_widget.observe(update_rainfall_options, names='value')\n",
    "soil_color_widget.observe(update_rainfall_options, names='value')\n",
    "\n",
    "district_widget.observe(update_temperature_options, names='value')\n",
    "soil_color_widget.observe(update_temperature_options, names='value')\n",
    "\n",
    "\n",
    "\n",
    "# Create the button widget\n",
    "button = widgets.Button(description='Train Model')\n",
    "# Add the train_model function as an observer to the 'on_click' event of the button\n",
    "button.on_click(train_model)\n",
    "\n",
    "# Display the widgets\n",
    "widgets.VBox([district_widget, soil_color_widget, nitrogen_widget,phosphorus_widget,potassium_widget,ph_widget,rainfall_widget,temperature_widget,button,recommend_widget])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "559c8c0f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-21T12:44:11.582536Z",
     "iopub.status.busy": "2024-02-21T12:44:11.582090Z",
     "iopub.status.idle": "2024-02-21T12:44:11.639938Z",
     "shell.execute_reply": "2024-02-21T12:44:11.638832Z"
    },
    "papermill": {
     "duration": 0.066831,
     "end_time": "2024-02-21T12:44:11.642515",
     "exception": false,
     "start_time": "2024-02-21T12:44:11.575684",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6010dbcfa47c4fa9896473bc0f4efac4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox(children=(Combobox(value='', description='District:', ensure_option=True, options=('Jhajjar', 'Rewari'), …"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create combo box for District_name\n",
    "district_widget = widgets.Combobox(\n",
    "    options=tuple(dataset['district'].unique()),\n",
    "    description='District:',\n",
    "    placeholder='Select district',\n",
    "    ensure_option=True\n",
    ")\n",
    "\n",
    "# Create an empty soil color widget initially\n",
    "soil_color_widget = widgets.Combobox(\n",
    "    description='Soil Color:',\n",
    "    placeholder='Select soil color',\n",
    "    ensure_option=True\n",
    ")\n",
    "\n",
    "\n",
    "temperature_widget = widgets.Combobox(\n",
    "    description='Temperature:',\n",
    "    placeholder='Select temperature value',\n",
    "    ensure_option=True\n",
    ")\n",
    "\n",
    "recommend_widget = widgets.Output()\n",
    "\n",
    "\n",
    "# Define the observer function to update soil color options\n",
    "def update_soil_color_options(change):\n",
    "    district = change.new\n",
    "    if district:\n",
    "        soil_colors = dataset[dataset['district'] == district]['Soil_Type'].unique()\n",
    "        soil_color_widget.options = tuple(soil_colors)\n",
    "    else:\n",
    "        soil_color_widget.options = ()\n",
    "\n",
    "\n",
    "        \n",
    "def update_temperature_options(change):\n",
    "    district = district_widget.value\n",
    "    soil_color = soil_color_widget.value\n",
    "    if district and soil_color:\n",
    "        temperature_values = dataset[(dataset['district'] == district) & (dataset['Soil_Type'] == soil_color)]['temperature'].unique()\n",
    "        temperature_values = [str(value) for value in temperature_values]  # Convert to Unicode strings\n",
    "        temperature_widget.options = tuple(temperature_values)\n",
    "    else:\n",
    "        temperature_widget.options = ()\n",
    "        \n",
    "\n",
    "# Train the model\n",
    "def train_model(change):\n",
    "    # Get the selected values from the combo boxes\n",
    "    district = district_widget.value\n",
    "    soil_color = soil_color_widget.value\n",
    "    temperature = float(temperature_widget.value)\n",
    "\n",
    "   \n",
    "    input_data = pd.DataFrame(\n",
    "        [[ temperature, district, soil_color]],\n",
    "        columns=[ 'temperature', 'district', 'Soil_Type']\n",
    "    )\n",
    "    \n",
    "    # Perform one-hot encoding for District_Name and Soil_color columns\n",
    "    encoder = OneHotEncoder(handle_unknown='ignore')\n",
    "    X_encoded = encoder.fit_transform(dataset[['district', 'Soil_Type']])\n",
    "    input_data_encoded = encoder.transform(input_data[['district', 'Soil_Type']])\n",
    "\n",
    "    # Split the dataset into training and testing sets\n",
    "    X_train, X_test, y_train, y_test = train_test_split(X_encoded, dataset['Trees'], test_size=0.2, random_state=42)\n",
    "\n",
    "    # Train the random forest model\n",
    "    model_crop = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "    model_crop.fit(X_train, y_train)\n",
    "\n",
    "    # Make predictions\n",
    "    predicted_crop = model_crop.predict(input_data_encoded)\n",
    "\n",
    "    # Find the fertilizer associated with the recommended crop\n",
    "   \n",
    "    with recommend_widget:\n",
    "        recommend_widget.clear_output()\n",
    "        print(\"Recommended Tree:\", predicted_crop[0])\n",
    "      \n",
    "\n",
    "# Define the observer function to update soil color options\n",
    "district_widget.observe(update_soil_color_options, names='value')\n",
    "district_widget.observe(update_temperature_options, names='value')\n",
    "soil_color_widget.observe(update_temperature_options, names='value')\n",
    "\n",
    "\n",
    "\n",
    "# Create the button widget\n",
    "button = widgets.Button(description='Train Model')\n",
    "# Add the train_model function as an observer to the 'on_click' event of the button\n",
    "button.on_click(train_model)\n",
    "\n",
    "# Display the widgets\n",
    "widgets.VBox([district_widget, soil_color_widget,temperature_widget,button,recommend_widget])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8899569f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-21T12:44:11.655140Z",
     "iopub.status.busy": "2024-02-21T12:44:11.654739Z",
     "iopub.status.idle": "2024-02-21T12:44:11.660569Z",
     "shell.execute_reply": "2024-02-21T12:44:11.659619Z"
    },
    "papermill": {
     "duration": 0.015032,
     "end_time": "2024-02-21T12:44:11.662998",
     "exception": false,
     "start_time": "2024-02-21T12:44:11.647966",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pickle\n",
    "model_file = \"model.pickle\"\n",
    "with open(model_file,'wb') as f:\n",
    " pickle.dump(train_model, f)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 4372706,
     "sourceId": 7508075,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30635,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8.504994,
   "end_time": "2024-02-21T12:44:12.289246",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-02-21T12:44:03.784252",
   "version": "2.4.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "01568ff0ce9b4b2196d5011c9667152a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0712a0d2834348dd992f66758b9d929a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1422de5adbff4fc6889d280e46d3f60d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ComboboxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ComboboxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ComboboxView",
       "continuous_update": true,
       "description": "Soil Color:",
       "description_tooltip": null,
       "disabled": false,
       "ensure_option": true,
       "layout": "IPY_MODEL_e79f297b68c74209900733db2da32c28",
       "options": [],
       "placeholder": "Select soil color",
       "style": "IPY_MODEL_bc7a299093604d44aace7d3d891ac13e",
       "value": ""
      }
     },
     "43bd6854eb0f457cabdacde06ce0463e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ButtonStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ButtonStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "button_color": null,
       "font_weight": ""
      }
     },
     "6010dbcfa47c4fa9896473bc0f4efac4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "VBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "VBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "VBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_6845eca645a24fe0b9fe3f0627d052e1",
        "IPY_MODEL_1422de5adbff4fc6889d280e46d3f60d",
        "IPY_MODEL_62b5b9f296cf4ecabfd91c2c6c79971d",
        "IPY_MODEL_6df5b24e064b4f0a986af7bd5c950e45",
        "IPY_MODEL_e09f9a59f641474995aac51a97eb1ac0"
       ],
       "layout": "IPY_MODEL_8cdaf669c8984f5fbd8d4371aad59dbe"
      }
     },
     "62b5b9f296cf4ecabfd91c2c6c79971d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ComboboxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ComboboxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ComboboxView",
       "continuous_update": true,
       "description": "Temperature:",
       "description_tooltip": null,
       "disabled": false,
       "ensure_option": true,
       "layout": "IPY_MODEL_935af7f0f2174ea5a3674a3eba82d705",
       "options": [],
       "placeholder": "Select temperature value",
       "style": "IPY_MODEL_814b6dbd1d2f40779f673dfb903a858e",
       "value": ""
      }
     },
     "6845eca645a24fe0b9fe3f0627d052e1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ComboboxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ComboboxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ComboboxView",
       "continuous_update": true,
       "description": "District:",
       "description_tooltip": null,
       "disabled": false,
       "ensure_option": true,
       "layout": "IPY_MODEL_01568ff0ce9b4b2196d5011c9667152a",
       "options": [
        "Jhajjar",
        "Rewari"
       ],
       "placeholder": "Select district",
       "style": "IPY_MODEL_77da52c4bc2648359d9df029ae624297",
       "value": ""
      }
     },
     "6df5b24e064b4f0a986af7bd5c950e45": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "ButtonModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "ButtonModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "1.5.0",
       "_view_name": "ButtonView",
       "button_style": "",
       "description": "Train Model",
       "disabled": false,
       "icon": "",
       "layout": "IPY_MODEL_0712a0d2834348dd992f66758b9d929a",
       "style": "IPY_MODEL_43bd6854eb0f457cabdacde06ce0463e",
       "tooltip": ""
      }
     },
     "77da52c4bc2648359d9df029ae624297": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "814b6dbd1d2f40779f673dfb903a858e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "8cdaf669c8984f5fbd8d4371aad59dbe": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "935af7f0f2174ea5a3674a3eba82d705": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bc7a299093604d44aace7d3d891ac13e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "1.5.0",
      "model_name": "DescriptionStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "1.5.0",
       "_model_name": "DescriptionStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "StyleView",
       "description_width": ""
      }
     },
     "e09f9a59f641474995aac51a97eb1ac0": {
      "model_module": "@jupyter-widgets/output",
      "model_module_version": "1.0.0",
      "model_name": "OutputModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/output",
       "_model_module_version": "1.0.0",
       "_model_name": "OutputModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/output",
       "_view_module_version": "1.0.0",
       "_view_name": "OutputView",
       "layout": "IPY_MODEL_fb50abe2d2434b048ebf0af25fa9dd49",
       "msg_id": "",
       "outputs": []
      }
     },
     "e79f297b68c74209900733db2da32c28": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fb50abe2d2434b048ebf0af25fa9dd49": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "1.2.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "1.2.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "1.2.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "overflow_x": null,
       "overflow_y": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
